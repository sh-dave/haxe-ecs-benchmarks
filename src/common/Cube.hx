package;

class Cube {
	public static function build( ?opts: { ?size: Float }) : {
		final vertices: Array<Float>;
		final indices: Array<Int>;
	} {
		final s = opts != null && opts.size != null ? opts.size : 0.5;

		return {
			vertices: [
				// front face
				-s, -s,  s,
				s, -s,  s,
				s,  s,  s,
				-s,  s,  s,

				// back face
				-s, -s, -s,
				-s,  s, -s,
				s,  s, -s,
				s, -s, -s,

				// top face
				-s,  s, -s,
				-s,  s,  s,
				s,  s,  s,
				s,  s, -s,

				// bottom face
				-s, -s, -s,
				s, -s, -s,
				s, -s,  s,
				-s, -s,  s,

				// right face
				s, -s, -s,
				s,  s, -s,
				s,  s,  s,
				s, -s,  s,

				// left face
				-s, -s, -s,
				-s, -s,  s,
				-s,  s,  s,
				-s,  s, -s
			],

			indices: [
				0,  1,  2,      0,  2,  3,		// front
				4,  5,  6,      4,  6,  7,		// back
				8,  9,  10,     8,  10, 11,		// top
				12, 13, 14,     12, 14, 15,		// bottom
				16, 17, 18,     16, 18, 19,		// right
				20, 21, 22,     20, 22, 23,		// left
			],
		}
	}
}

// 	static var uvs = [
// 		// Front
// 		0.0,  0.0,
// 		1.0,  0.0,
// 		1.0,  1.0,
// 		0.0,  1.0,

// 		// Back
// 		0.0,  0.0,
// 		1.0,  0.0,
// 		1.0,  1.0,
// 		0.0,  1.0,

// 		// Top
// 		0.0,  0.0,
// 		1.0,  0.0,
// 		1.0,  1.0,
// 		0.0,  1.0,

// 		// Bottom
// 		0.0,  0.0,
// 		1.0,  0.0,
// 		1.0,  1.0,
// 		0.0,  1.0,

// 		// Right
// 		0.0,  0.0,
// 		1.0,  0.0,
// 		1.0,  1.0,
// 		0.0,  1.0,

// 		// Left
// 		0.0,  0.0,
// 		1.0,  0.0,
// 		1.0,  1.0,
// 		0.0,  1.0
// 	];

// 	static var normals: Array<Float> = [
// 		// Front
// 		0.0,  0.0,  1.0,
// 		0.0,  0.0,  1.0,
// 		0.0,  0.0,  1.0,
// 		0.0,  0.0,  1.0,

// 		// Back
// 		0.0,  0.0, -1.0,
// 		0.0,  0.0, -1.0,
// 		0.0,  0.0, -1.0,
// 		0.0,  0.0, -1.0,

// 		// Top
// 		0.0,  1.0,  0.0,
// 		0.0,  1.0,  0.0,
// 		0.0,  1.0,  0.0,
// 		0.0,  1.0,  0.0,

// 		// Bottom
// 		0.0, -1.0,  0.0,
// 		0.0, -1.0,  0.0,
// 		0.0, -1.0,  0.0,
// 		0.0, -1.0,  0.0,

// 		// Right
// 		1.0,  0.0,  0.0,
// 		1.0,  0.0,  0.0,
// 		1.0,  0.0,  0.0,
// 		1.0,  0.0,  0.0,

// 		// Left
// 		-1.0,  0.0,  0.0,
// 		-1.0,  0.0,  0.0,
// 		-1.0,  0.0,  0.0,
// 		-1.0,  0.0,  0.0
// ];
